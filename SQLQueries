# View for the questions

CREATE VIEW extendedBooking AS
  SELECT *,
  DATE_ADD(booking_date, INTERVAL nights - 1 DAY) AS leave_date,
  DATE_ADD(booking_date, INTERVAL nights DAY) AS checkout_date
  FROM booking


# QUESTION 11

SELECT
  guestX.last_name AS surname,
  MIN(guestX.first_name) AS first_person,
  MAX(guestX.first_name) AS second_person
FROM extendedbooking AS bookingX JOIN guest AS guestX ON bookingX.guest_id = guestX.id
WHERE guestX.last_name IN (
  SELECT guestY.last_name
  FROM extendedbooking AS bookingY
    JOIN guest AS guestY ON bookingY.guest_id = guestY.id
  WHERE bookingX.guest_id <> bookingY.guest_id
        AND
        (bookingX.booking_date <= bookingY.leave_date
         AND
         bookingX.leave_date >= bookingY.booking_date)
        AND
        guestX.last_name = guestY.last_name
)
GROUP BY Surname


# QUESTION 12

SELECT
  checkoutDay,
  SUM(CASE WHEN floor = 1 THEN dayAmount END) AS Floor_1,
  SUM(CASE WHEN floor = 2 THEN dayAmount END) AS Floor_2,
  SUM(CASE WHEN floor = 3 THEN dayAmount END) AS Floor_3
FROM (
  SELECT DAYNAME(checkout_date) AS checkoutDay,
    CASE
    WHEN room_no < 200 THEN 1
    WHEN room_no < 300 AND  room_no > 199 THEN 2
    ELSE 3
  END AS floor,
  COUNT(*) AS dayAmount
FROM extendedbooking
WHERE checkout_date BETWEEN '2016-11-14' AND DATE_ADD('2016-11-14', INTERVAL 6 DAY)
GROUP BY checkoutDay, floor
) AS amountByFloorAndDay
GROUP BY checkoutDay


# QUESTION 13

SELECT
  calendar.i,
  CASE
  WHEN last_name IS NULL THEN '--Available--' ELSE last_name
  END AS Surname
FROM calendar
  LEFT JOIN (
              SELECT
                *
              FROM extendedbooking
              WHERE room_no = 207
            )
    AS expandedBooking ON calendar.i BETWEEN expandedBooking.booking_date AND expandedBooking.leave_date
  LEFT JOIN guest ON expandedBooking.guest_id = guest.id
WHERE calendar.i BETWEEN '2016-11-21' AND DATE_ADD('2016-11-21', INTERVAL 6 DAY)

# QUESTION 14

SELECT
  edgeCaseBooking.room_no as room,
  edgeCaseBooking.availStart as avail,
  CASE WHEN edgeCaseBooking.availEnd IS NULL THEN '2016-12-19' ELSE edgeCaseBooking.availEnd END AS availEnd
FROM (
       SELECT
         extendedBooking.room_no,
         room_type_requested,
         checkout_date AS availStart,
         (
           SELECT MIN(secondBooking.booking_date)
           FROM booking secondBooking
           WHERE secondBooking.room_no = extendedBooking.room_no
                 AND secondBooking.booking_date > extendedBooking.booking_date
         ) AS availEnd
       FROM extendedBooking
       WHERE extendedBooking.room_type_requested = 'double'
     ) AS edgeCaseBooking
HAVING DATEDIFF(availEnd, availStart) >= 7
       AND
       (
         (availEnd >= '2016-12-19' AND availStart <= '2016-11-03')
         OR
         (availStart >= '2016-11-03' AND DATE_ADD(availStart, INTERVAL 7 - 1 DAY) <= '2016-12-19')
         OR
         (availStart <= '2016-11-03' AND availEnd >= DATE_ADD('2016-11-03', INTERVAL 7 - 1 DAY) )
       )



# QUESTION 15

CREATE VIEW room_costs as
  SELECT
    booking_id,
    SUM(rate.amount * extendedBooking.nights) AS roomCost
  FROM extendedBooking
    JOIN rate ON extendedBooking.room_type_requested = rate.room_type AND extendedBooking.occupants = rate.occupancy
  GROUP BY extendedbooking.booking_id

CREATE VIEW extras_costs as
  SELECT
    extendedbooking.booking_id,
    SUM(amount) extras
  FROM extendedBooking
    JOIN extra ON extra.booking_id = extendedBooking.booking_id
  GROUP BY extendedbooking.booking_id


SELECT
  calendar.i,
  COALESCE(
      (SELECT
         sum(extras + roomCost)
       FROM extendedbooking
         JOIN extras_costs ON extras_costs.booking_id = extendedbooking.booking_id
         JOIN room_costs ON room_costs.booking_id = extendedbooking.booking_id
       WHERE checkout_date BETWEEN DATE_ADD(calendar.i, INTERVAL -6 DAY) AND calendar.i),
      0
  ) AS incomeToDate
FROM calendar
WHERE DAYNAME(calendar.i) = 'Thursday' AND MONTH(calendar.i) = 11 AND YEAR(calendar.i) = 2016
ORDER BY calendar.i

DROP VIEW guesthouse.room_costs RESTRICT;
DROP VIEW guesthouse.extras_costs RESTRICT;





------------------------------------------------------------------------------------------------------------------------

CREATE TABLE guesthouse.payments
(
    id INT PRIMARY KEY AUTO_INCREMENT,
    payment_date DATE,
    payment_method VARCHAR(16),
    booking_id INT NOT NULL,
    extra_id INT NULL,
    amount INT NOT NULL,
    FOREIGN KEY (booking_id) REFERENCES booking(booking_id)
    FOREIGN KEY (extra_id) REFERENCES extra(extra_id)
);
CREATE UNIQUE INDEX payments_id_uindex ON guesthouse.payments (id);

------------------------------------------------------------------------------------------------------------------------

CREATE TABLE guesthouse.VAT
(
    id INT PRIMARY KEY AUTO_INCREMENT,
    vat_percentage DOUBLE NOT NULL,
    active_from DATE NOT NULL,
    active_until DATE NULL
);

INSERT INTO vat (vat_percentage, active_from, active_until)
VALUES (17.5, '2010-01-01', '2011-01-03'),
       (20, '2011-01-04', null)

------------------------------------------------------------------------------------------------------------------------

ALTER TABLE guesthouse.extra ADD service_id INT NULL

CREATE TABLE guesthouse.extra_services
(
    id INT PRIMARY KEY NOT NULL AUTO_INCREMENT,
    name VARCHAR(16) NOT NULL,
    attracts_vat BOOL NOT NULL
);

INSERT INTO extra_services (name, attracts_vat)
    VALUES ('Breakfast', FALSE ), ('Phone Calls', TRUE)

UPDATE extra SET service_id = (SELECT id FROM extra_services WHERE name = 'Breakfast')
WHERE extra.description LIKE 'Breakfast%'

UPDATE extra SET service_id = (SELECT id FROM extra_services WHERE name = 'Phone Calls')
WHERE extra.description LIKE 'Phone%'

------------------------------------------------------------------------------------------------------------------------

INSERT INTO guesthouse.payments (payment_date, payment_method, booking_id, amount)
VALUES ('2016-12-11', 'Debit Card', 5360, 216),
  ('2016-11-20', 'BACS', 5359, 288),
  ((SELECT checkout_date
    FROM extendedBooking
    WHERE booking_id = 5359), 'Cash', 5359, 49.06)

------------------------------------------------------------------------------------------------------------------------
# It must be possible to answer a guestâ€™s query about how much they owe at any time.

SELECT
  (
    SELECT
      SUM(rate.amount * nights) + SUM(extrasCost.extras) AS totalDue
    FROM extendedBooking
      JOIN rate ON extendedBooking.room_type_requested = rate.room_type AND extendedBooking.occupants = rate.occupancy
      JOIN (SELECT
              extendedbooking.booking_id,
              SUM(amount) extras
            FROM extendedBooking
              JOIN extra ON extra.booking_id = extendedBooking.booking_id
            GROUP BY extendedbooking.booking_id)
        AS extrasCost ON extrasCost.booking_id = extendedBooking.booking_id
    WHERE extrasCost.booking_id = 5359
    GROUP BY extendedbooking.booking_id
  ) - SUM(amount) dueToDate
FROM payments
WHERE payment_date < '2016-11-25'
      AND booking_id = 5359

# It must be possible to view all payments made including the date they were made, the amount and the method of payment used.

SELECT *
FROM payments

# It must be possible to find out how much money has been taken in cash on any given day.

SELECT SUM(amount)
FROM payments
WHERE payment_method = 'Cash'
AND payment_date = '___INSERT DATE HERE___'


------------------------------------------------------------------------------------------------------------------------

CREATE VIEW extras_vat AS
SELECT
    extra.booking_id,
    SUM(CASE WHEN attracts_vat = TRUE then amount - (amount / ( 100 + vat_percentage)) * vat.vat_percentage ELSE amount END) AS extras_amount_pre_vat,
    SUM(CASE WHEN attracts_vat = TRUE then (amount / ( 100 + vat_percentage)) * vat.vat_percentage ELSE 0 END)  AS extras_payable_vat,
    SUM(amount) AS extras_full_amount
  FROM extra
  JOIN extra_services ON extra.service_id = extra_services.id
  JOIN booking ON booking.booking_id = extra.booking_id
  JOIN vat ON (booking.booking_date BETWEEN active_from AND active_until OR booking.booking_date >= active_from AND active_until IS NULL)
  GROUP BY extra.booking_id


CREATE VIEW rooms_vat as
  SELECT
    booking_id,
    SUM(rate.amount * booking.nights) - (SUM(rate.amount * booking.nights) / ( 100 + vat_percentage)) * vat.vat_percentage AS room_amount_pre_vat,
    (SUM(rate.amount * booking.nights) / ( 100 + vat_percentage)) * vat.vat_percentage AS room_payable_vat,
    SUM(rate.amount * booking.nights) AS room_full_amount
  FROM booking
    JOIN rate ON booking.room_type_requested = rate.room_type AND booking.occupants = rate.occupancy
    JOIN vat ON (booking.booking_date BETWEEN active_from AND active_until OR booking.booking_date >= active_from AND active_until IS NULL)
  GROUP BY booking.booking_id


SELECT
  *
FROM extras_vat
JOIN rooms_vat ON rooms_vat.booking_id = extras_vat.booking_id
WHERE extras_vat.booking_id = 5359



